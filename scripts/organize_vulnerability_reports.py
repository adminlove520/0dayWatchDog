#!/usr/bin/env python3
"""
漏洞报告数据整理脚本
用于重组vulnerability_reports目录结构，修正日期格式并添加版权信息
"""

import os
import re
import shutil
from datetime import datetime
from pathlib import Path

# 版权信息
COPYRIGHT_INFO = """
---
## 版权信息

东方隐侠安全团队（[https://www.dfyxsec.com/](https://www.dfyxsec.com/)）  
Anonymous（[https://github.com/adminlove520](https://github.com/adminlove520)）  
东方隐侠安全团队公众号  
![公众号](./wemp.jpg)
"""

def extract_date_from_filename(filename):
    """从文件名提取日期信息"""
    # 匹配 YYYY-MM-DD_HH-MM-SS 格式
    pattern = r'vulnerability_report_(\d{4}-\d{2}-\d{2})_(\d{2}-\d{2}-\d{2})'
    match = re.search(pattern, filename)
    if match:
        date_part = match.group(1)  # YYYY-MM-DD
        time_part = match.group(2)    # HH-MM-SS
        return date_part, time_part
    return None, None

def update_report_title(content, new_date):
    """更新报告标题中的日期格式"""
    # 匹配标题行 # 漏洞情报报告 - YYYY-MM-DD_HH-MM-SS
    pattern = r'(^# 漏洞情报报告 - )(\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2})'
    new_title = f'# 漏洞情报报告 - {new_date}'
    
    lines = content.split('\n')
    for i, line in enumerate(lines):
        if line.startswith('# 漏洞情报报告 - '):
            lines[i] = new_title
            break
    
    return '\n'.join(lines)

def add_copyright_if_needed(content):
    """如果内容中没有版权信息，则添加"""
    if '版权信息' in content or '东方隐侠安全团队' in content:
        return content  # 已经存在版权信息
    
    # 确保内容末尾有换行符
    if not content.endswith('\n'):
        content += '\n'
    
    copyright_info = """
---
<div align="center">

## 版权信息

东方隐侠安全团队（[https://www.dfyxsec.com/](https://www.dfyxsec.com/)）  
Anonymous（[https://github.com/adminlove520](https://github.com/adminlove520)）  
东方隐侠安全团队公众号  
![公众号](../wemp.jpg)

</div>
"""
    return content + copyright_info

def process_single_report(file_path, base_dir):
    """处理单个漏洞报告文件"""
    filename = os.path.basename(file_path)
    
    # 提取日期信息
    date_part, time_part = extract_date_from_filename(filename)
    if not date_part:
        print(f"无法从文件名提取日期: {filename}")
        return False
    
    # 读取文件内容
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"读取文件失败 {filename}: {e}")
        return False
    
    # 更新标题日期格式
    content = update_report_title(content, date_part)
    
    # 添加版权信息
    content = add_copyright_if_needed(content)
    
    # 创建新目录结构
    new_dir_name = f"vulnerability_report_{date_part}"
    new_dir_path = os.path.join(base_dir, new_dir_name)
    
    # 创建目录
    os.makedirs(new_dir_path, exist_ok=True)
    
    # 新文件名（去掉时间部分）
    new_filename = f"vulnerability_report_{date_part}.md"
    new_file_path = os.path.join(new_dir_path, new_filename)
    
    # 写入更新后的内容
    try:
        with open(new_file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"已处理: {filename} -> {new_dir_name}/{new_filename}")
        return True
    except Exception as e:
        print(f"写入文件失败 {new_filename}: {e}")
        return False

def organize_vulnerability_reports():
    """主函数：整理漏洞报告"""
    # 获取脚本所在目录的父目录
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    reports_dir = project_root / "vulnerability_reports"
    
    if not reports_dir.exists():
        print(f"错误: {reports_dir} 目录不存在")
        return
    
    # 获取所有markdown文件
    md_files = list(reports_dir.glob("vulnerability_report_*.md"))
    
    if not md_files:
        print("未找到需要处理的漏洞报告文件")
        return
    
    print(f"找到 {len(md_files)} 个漏洞报告文件")
    
    # 处理每个文件
    processed = 0
    failed = 0
    
    for file_path in md_files:
        if process_single_report(file_path, reports_dir):
            processed += 1
            # 处理成功后删除原文件
            try:
                os.remove(file_path)
            except Exception as e:
                print(f"删除原文件失败 {file_path}: {e}")
        else:
            failed += 1
    
    print(f"\n处理完成:")
    print(f"成功: {processed} 个")
    print(f"失败: {failed} 个")
    
    # 检查并处理现有的文件夹（如 vulnerability_report_2025-10-09_00-14-55）
    folders = [d for d in reports_dir.iterdir() if d.is_dir() and d.name.startswith("vulnerability_report_")]
    
    for folder in folders:
        # 检查文件夹内是否有对应的markdown文件
        md_in_folder = list(folder.glob("vulnerability_report_*.md"))
        if md_in_folder:
            for md_file in md_in_folder:
                # 提取日期
                folder_date = folder.name.replace("vulnerability_report_", "").split("_")[0]
                new_dir_name = f"vulnerability_report_{folder_date}"
                new_dir_path = reports_dir / new_dir_name
                
                # 创建新目录
                new_dir_path.mkdir(exist_ok=True)
                
                # 移动文件
                new_file_path = new_dir_path / md_file.name
                try:
                    shutil.move(str(md_file), str(new_file_path))
                    print(f"移动文件: {md_file} -> {new_file_path}")
                    
                    # 更新文件内容
                    with open(new_file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    content = update_report_title(content, folder_date)
                    content = add_copyright_if_needed(content)
                    
                    with open(new_file_path, 'w', encoding='utf-8') as f:
                        f.write(content)
                    
                    print(f"更新文件内容: {new_file_path}")
                    
                except Exception as e:
                    print(f"处理文件夹中的文件失败: {e}")
            
            # 如果文件夹为空，删除它
            if not any(folder.iterdir()):
                try:
                    folder.rmdir()
                    print(f"删除空文件夹: {folder}")
                except Exception as e:
                    print(f"删除文件夹失败 {folder}: {e}")

if __name__ == "__main__":
    print("开始整理漏洞报告...")
    organize_vulnerability_reports()
    print("整理完成！")